
public void mirrorVerticalRightToLeft()
 {
 Pixel[][] pixels = this.getPixels2D();
 Pixel leftPixel = null;
 Pixel rightPixel = null;
 int width = pixels[0].length;
 for (int row = 0; row < pixels.length; row++)
 {
 for (int col = 0; col < width / 2; col++)
 {
 leftPixel = pixels[row][col];
 rightPixel = pixels[row][width - col - 1];
 leftPixel.setColor(rightPixel.getColor());
 }
 }
 }
 
 
 public void mirrorHorizontal()
 {
 Pixel[][] pixels = this.getPixels2D();
 Pixel topPixel = null;
 Pixel botPixel = null;
 int height = pixels.length;
 for (int row = 0; row < height / 2; row++)
 {
 for (int col = 0; col < pixels[0].length; col++)
 {
 topPixel = pixels[row][col];
 botPixel = pixels[height - row - 1][col];
 botPixel.setColor(topPixel.getColor());
14
 }
 }
 }
 
 
  public void mirrorHorizontalBotToTop()
 {
 Pixel[][] pixels = this.getPixels2D();
 Pixel topPixel = null;
 Pixel botPixel = null;
 int height = pixels.length;
 for (int row = 0; row < height / 2; row++)
 {
 for (int col = 0; col < pixels[0].length; col++)
 {
 topPixel = pixels[row][col];
 botPixel = pixels[height - row - 1][col];
 topPixel.setColor(botPixel.getColor());
 }
 }
}



 public void mirrorDiagonal()
 {
 Pixel[][] pixels = this.getPixels2D();
 Pixel leftPixel = null;
 Pixel rightPixel = null;

 // calculate the max area to mirror (min of width or height)
 int max = pixels.length;
 if (pixels[0].length < max)
 max = pixels[0].length;

 // loop through to the left of the diagonal line (row=col)
 for (int row = 1; row < max; row++)
15
 {
 for (int col = 0; col < row; col++)
 {
 leftPixel = pixels[row][col];
 rightPixel = pixels[col][row];
 rightPixel.setColor(leftPixel.getColor());
 }
 }
 }
